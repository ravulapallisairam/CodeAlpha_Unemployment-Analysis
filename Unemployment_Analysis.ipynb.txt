{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "k4SOUVPlOBEg"
      },
      "outputs": [],
      "source": [
        "# ðŸ“Š Unemployment Rate Analysis (India - 2020)\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "uploaded = files.upload()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 73
        },
        "id": "ZReOL9glOn-T",
        "outputId": "85e1fdea-d7f8-4e9e-cd6e-8e9f6ad7418f"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-ac2ce91a-d547-4c0a-8602-20ae1ae6faac\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-ac2ce91a-d547-4c0a-8602-20ae1ae6faac\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving Unemployment_Rate_upto_11_2020.csv to Unemployment_Rate_upto_11_2020.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv(\"Unemployment_Rate_upto_11_2020.csv\")\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 432
        },
        "id": "7cWZCLX9O-GT",
        "outputId": "8af40c2b-45c0-41af-b492-9b94e01e7f23"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           Region         Date  Frequency   Estimated Unemployment Rate (%)  \\\n",
              "0  Andhra Pradesh   31-01-2020          M                              5.48   \n",
              "1  Andhra Pradesh   29-02-2020          M                              5.83   \n",
              "2  Andhra Pradesh   31-03-2020          M                              5.79   \n",
              "3  Andhra Pradesh   30-04-2020          M                             20.51   \n",
              "4  Andhra Pradesh   31-05-2020          M                             17.43   \n",
              "\n",
              "    Estimated Employed   Estimated Labour Participation Rate (%) Region.1  \\\n",
              "0             16635535                                     41.02    South   \n",
              "1             16545652                                     40.90    South   \n",
              "2             15881197                                     39.18    South   \n",
              "3             11336911                                     33.10    South   \n",
              "4             12988845                                     36.46    South   \n",
              "\n",
              "   longitude  latitude  \n",
              "0    15.9129     79.74  \n",
              "1    15.9129     79.74  \n",
              "2    15.9129     79.74  \n",
              "3    15.9129     79.74  \n",
              "4    15.9129     79.74  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-37ce1e3d-d130-4cee-ac59-0b0af79c510d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Region</th>\n",
              "      <th>Date</th>\n",
              "      <th>Frequency</th>\n",
              "      <th>Estimated Unemployment Rate (%)</th>\n",
              "      <th>Estimated Employed</th>\n",
              "      <th>Estimated Labour Participation Rate (%)</th>\n",
              "      <th>Region.1</th>\n",
              "      <th>longitude</th>\n",
              "      <th>latitude</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Andhra Pradesh</td>\n",
              "      <td>31-01-2020</td>\n",
              "      <td>M</td>\n",
              "      <td>5.48</td>\n",
              "      <td>16635535</td>\n",
              "      <td>41.02</td>\n",
              "      <td>South</td>\n",
              "      <td>15.9129</td>\n",
              "      <td>79.74</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Andhra Pradesh</td>\n",
              "      <td>29-02-2020</td>\n",
              "      <td>M</td>\n",
              "      <td>5.83</td>\n",
              "      <td>16545652</td>\n",
              "      <td>40.90</td>\n",
              "      <td>South</td>\n",
              "      <td>15.9129</td>\n",
              "      <td>79.74</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Andhra Pradesh</td>\n",
              "      <td>31-03-2020</td>\n",
              "      <td>M</td>\n",
              "      <td>5.79</td>\n",
              "      <td>15881197</td>\n",
              "      <td>39.18</td>\n",
              "      <td>South</td>\n",
              "      <td>15.9129</td>\n",
              "      <td>79.74</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Andhra Pradesh</td>\n",
              "      <td>30-04-2020</td>\n",
              "      <td>M</td>\n",
              "      <td>20.51</td>\n",
              "      <td>11336911</td>\n",
              "      <td>33.10</td>\n",
              "      <td>South</td>\n",
              "      <td>15.9129</td>\n",
              "      <td>79.74</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Andhra Pradesh</td>\n",
              "      <td>31-05-2020</td>\n",
              "      <td>M</td>\n",
              "      <td>17.43</td>\n",
              "      <td>12988845</td>\n",
              "      <td>36.46</td>\n",
              "      <td>South</td>\n",
              "      <td>15.9129</td>\n",
              "      <td>79.74</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-37ce1e3d-d130-4cee-ac59-0b0af79c510d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-37ce1e3d-d130-4cee-ac59-0b0af79c510d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-37ce1e3d-d130-4cee-ac59-0b0af79c510d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-29fbd2bd-89af-4498-9171-b6f56392630a\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-29fbd2bd-89af-4498-9171-b6f56392630a')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-29fbd2bd-89af-4498-9171-b6f56392630a button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 267,\n  \"fields\": [\n    {\n      \"column\": \"Region\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 27,\n        \"samples\": [\n          \"Himachal Pradesh\",\n          \"Madhya Pradesh\",\n          \"Jammu & Kashmir\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \" Date\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \" 30-09-2020\",\n          \" 29-02-2020\",\n          \" 30-06-2020\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \" Frequency\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \" M\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \" Estimated Unemployment Rate (%)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.803283384503734,\n        \"min\": 0.5,\n        \"max\": 75.85,\n        \"num_unique_values\": 252,\n        \"samples\": [\n          1.76\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \" Estimated Employed\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13366318,\n        \"min\": 117542,\n        \"max\": 59433759,\n        \"num_unique_values\": 267,\n        \"samples\": [\n          1897639\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \" Estimated Labour Participation Rate (%)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.845419462260698,\n        \"min\": 16.77,\n        \"max\": 69.69,\n        \"num_unique_values\": 248,\n        \"samples\": [\n          35.58\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Region.1\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Northeast\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"longitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.270730800980838,\n        \"min\": 10.8505,\n        \"max\": 33.7782,\n        \"num_unique_values\": 27,\n        \"samples\": [\n          31.1048\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"latitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.831737701769846,\n        \"min\": 71.1924,\n        \"max\": 92.9376,\n        \"num_unique_values\": 24,\n        \"samples\": [\n          77.1734\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.columns = df.columns.str.strip().str.replace(\" \", \"_\")\n",
        "df['Date'] = pd.to_datetime(df['Date'])\n",
        "df['Year'] = df['Date'].dt.year\n",
        "df['Month'] = df['Date'].dt.month\n",
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 580
        },
        "id": "qdnZldtfPEOG",
        "outputId": "e0e42685-caab-411c-aad7-a0af8c2f66e2"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-10-1607688925.py:2: UserWarning: Parsing dates in  %d-%m-%Y format when dayfirst=False (the default) was specified. Pass `dayfirst=True` or specify a format to silence this warning.\n",
            "  df['Date'] = pd.to_datetime(df['Date'])\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Region                                     0\n",
              "Date                                       0\n",
              "Frequency                                  0\n",
              "Estimated_Unemployment_Rate_(%)            0\n",
              "Estimated_Employed                         0\n",
              "Estimated_Labour_Participation_Rate_(%)    0\n",
              "Region.1                                   0\n",
              "longitude                                  0\n",
              "latitude                                   0\n",
              "Year                                       0\n",
              "Month                                      0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Region</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Frequency</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Estimated_Unemployment_Rate_(%)</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Estimated_Employed</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Estimated_Labour_Participation_Rate_(%)</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Region.1</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>longitude</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>latitude</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Year</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Month</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10,6))\n",
        "sns.lineplot(x='Date', y='Estimated_Unemployment_Rate_(%)', data=df)\n",
        "plt.title(\"Unemployment Rate Over Time\")\n",
        "plt.xticks(rotation=45)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 601
        },
        "id": "TrH1iDbLPjad",
        "outputId": "99096657-e94f-492f-8510-89a9fdcb4f5f"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10,5))\n",
        "sns.boxplot(x='Month', y='Estimated_Unemployment_Rate_(%)', data=df)\n",
        "plt.title(\"Monthly Unemployment Rate Distribution\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "id": "kTKcVdi-P1ZW",
        "outputId": "ae1dad47-2655-4f0e-c9b9-fb82f58424ae"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA0oAAAHWCAYAAABJ4Xn8AAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAZQdJREFUeJzt3XlcVGX///H3gGwugJiyJCCY4oqZlqGFZZZp2WaZRrmWlbhn3XmrIeZWfjOzXMK6tVxaLK2szNJcsrDMVFzuTJPAUrQ0QEVQ4fz+6MfcDqAyw8AZ8PV8PHjoXGd7z2GA+cx1netYDMMwBAAAAACwcjM7AAAAAAC4GgolAAAAACiCQgkAAAAAiqBQAgAAAIAiKJQAAAAAoAgKJQAAAAAogkIJAAAAAIqgUAIAAACAIiiUAAAAAKAICiUAlwWLxaIhQ4Zccr2FCxfKYrHot99+K/9QVVCDBg3Ur18/s2PAROvXr5fFYtH69evL/VgTJkyQxWKxaSvtz7oz8PsCqNoolACUSeEbBYvFok2bNhVbbhiGQkNDZbFYdOedd5Zrlu+++04TJkxQZmZmuR7HHjfddJNatGhR4rK//vpLFotFEyZMqNhQcKo9e/ZowoQJpX6zXPjmvvDLw8NDDRo00LBhwxx+7R46dEgTJkzQ9u3bHdr+Qn777bdiWa+44gq1b99e//73v5Wenu60Y02ZMkUfffSR0/bnTK6cDUD5oVAC4BTe3t5aunRpsfYNGzbo999/l5eXV7ln+O6775SYmOhShRKqvj179igxMdHuXoW5c+dq0aJFeu2113Tdddfp1VdfdfjDhEOHDikxMdHphVKh3r17a9GiRXrzzTc1fvx4RUZGaubMmWratKneffddm3VjY2N1+vRpxcbG2nUMR4qRcePG6fTp03Zt44gLZXvkkUd0+vRphYeHl3sGABWvmtkBAFQN3bp107JlyzRr1ixVq/a/Xy1Lly5VmzZt9Ndff5mYDnA9999/v6644gpJ0uOPP65evXrpvffe0w8//KDrrrvO5HS2rrnmGj388MM2bWlpabrtttvUt29fNW3aVK1atZIkubm5ydvbu1zznDp1SjVq1FC1atVsft9UNHd3d7m7u5t2fADlix4lAE7Ru3dvHTt2TF999ZW17cyZM/rggw/00EMPlbjNqVOn9NRTTyk0NFReXl6KiorS//3f/8kwDJv1Cq85+Oijj9SiRQt5eXmpefPm+uKLL6zrTJgwQU8//bQkKSIiwjpUqOin/BfbR0n69u2rK664QmfPni227LbbblNUVNRFt7dX4bCs/fv3q1+/fvL395efn5/69++vnJycYusvXrxYbdq0kY+PjwICAtSrVy8dPHjQZp3C4X8pKSnq2LGjqlevrquuukoffPCBpH96/dq1aycfHx9FRUVpzZo1JWb6+eef1bNnT/n6+qpOnToaPny4cnNzL/mcDhw4oAceeEABAQGqXr26rr/+en322WfW5SdPnlSNGjU0fPjwYtv+/vvvcnd319SpUyX9b6jnpk2bNGzYMNWtW1f+/v56/PHHdebMGWVmZqpPnz6qXbu2ateurWeeeabY66mgoEAzZ85U8+bN5e3trcDAQD3++OP6+++/bdZr0KCB7rzzTm3atEnXXXedvL29FRkZqbffftu6zsKFC/XAAw9Ikm6++Wbr686R63NuvPFGSdKvv/5qbTt+/LhGjx6tli1bqmbNmvL19VXXrl21Y8cO6zrr16/XtddeK0nq37+/NcPChQut63z//fe6/fbb5efnp+rVq6tjx4769ttv7c54vvDwcC1cuFBnzpzRiy++aJOn6DnYt2+fevTooaCgIHl7e6t+/frq1auXsrKyJP3zM37q1Cm99dZb1vyF17oVvv727Nmjhx56SLVr19YNN9xgs6wkS5YsUVRUlLy9vdWmTRtt3LjRZnm/fv3UoEGDYtsV3efFsl3oGqU5c+aoefPm8vLyUkhIiOLj44v1dBf+XO7Zs0c333yzqlevriuvvNLmXAIwF4USAKdo0KCBYmJi9M4771jbVq1apaysLPXq1avY+oZh6K677tLLL7+s22+/XTNmzFBUVJSefvppjRo1qtj6mzZt0uDBg9WrVy+9+OKLys3NVY8ePXTs2DFJ0n333afevXtLkl5++WUtWrRIixYtUt26dUu9j5I88sgjOnbsmFavXm3TnpGRoa+//rrYp+zO0rNnT504cUJTp05Vz549tXDhQiUmJtqsM3nyZPXp00eNGjXSjBkzNGLECK1du1axsbHF3pT9/fffuvPOO9WuXTu9+OKL8vLysvZg9OrVS926ddO0adN06tQp3X///Tpx4kSJmXJzczV16lR169ZNs2bN0qBBgy76PI4cOaL27dtr9erVGjx4sCZPnqzc3FzdddddWrFihSSpZs2auvfee/Xee+8pPz/fZvt33nlHhmEoLi7Opn3o0KHat2+fEhMTdddddykpKUnjx49X9+7dlZ+frylTpuiGG27Q9OnTtWjRIpttH3/8cT399NPq0KGDXnnlFfXv319LlixRly5dihXE+/fv1/33369bb71VL730kmrXrq1+/fpp9+7dkv4ZZjZs2DBJ0r///W/r665p06YXPS8lKXyzXbt2bWvbgQMH9NFHH+nOO+/UjBkz9PTTT2vnzp3q2LGjDh06JElq2rSpJk6cKEkaNGiQNUPh0Levv/5asbGxys7OVkJCgqZMmaLMzEx16tRJP/zwg905zxcTE6OGDRvafEBS1JkzZ9SlSxdt3rxZQ4cO1ezZszVo0CAdOHDA+jpdtGiRvLy8dOONN1rzP/744zb7eeCBB5STk6MpU6boscceu2iuDRs2aMSIEXr44Yc1ceJEHTt2TLfffrt27dpl93MsTbbzTZgwQfHx8QoJCdFLL72kHj166PXXX9dtt91W7PX1999/6/bbb1erVq300ksvqUmTJvrXv/6lVatW2Z0TQDkwAKAMFixYYEgytmzZYrz22mtGrVq1jJycHMMwDOOBBx4wbr75ZsMwDCM8PNy44447rNt99NFHhiRj0qRJNvu7//77DYvFYuzfv9/aJsnw9PS0aduxY4chyXj11VetbdOnTzckGampqcVylnYfhc+ncB/5+flG/fr1jQcffNBmfzNmzDAsFotx4MCBi56fjh07Gs2bNy9x2Z9//mlIMhISEqxtCQkJhiRjwIABNuvee++9Rp06dayPf/vtN8Pd3d2YPHmyzXo7d+40qlWrZtPesWNHQ5KxdOlSa9vPP/9sSDLc3NyMzZs3W9tXr15tSDIWLFhQLNNdd91lc6zBgwcbkowdO3ZY28LDw42+fftaH48YMcKQZHzzzTfWthMnThgRERFGgwYNjPz8fJvjrlq1yuYY0dHRRseOHa2PC78/Xbp0MQoKCqztMTExhsViMZ544glr27lz54z69evbbP/NN98YkowlS5bYHOeLL74o1h4eHm5IMjZu3GhtO3r0qOHl5WU89dRT1rZly5YZkox169YZpVF4Pvfu3Wv8+eefxm+//Wb85z//MXx8fIy6desap06dsq6bm5trPUeFUlNTDS8vL2PixInWti1bthT7vhmGYRQUFBiNGjUqdr5ycnKMiIgI49Zbb71o1tTUVEOSMX369Auuc/fddxuSjKysLMMwDGPdunU252Pbtm2GJGPZsmUXPVaNGjVsXjuFCs9X7969L7jsfJIMScaPP/5obUtLSzO8vb2Ne++919rWt29fIzw8vFT7vFC2or8vjh49anh6ehq33XabzffttddeMyQZ//nPf6xthT+Xb7/9trUtLy/PCAoKMnr06FHsWAAqHj1KAJymZ8+eOn36tD799FOdOHFCn3766QWH3X3++edyd3e3fhpf6KmnnpJhGMU+Ue3cubMaNmxofRwdHS1fX18dOHCg1Pkc2Yebm5vi4uL0ySef2PSyLFmyRO3bt1dERESpj2+PJ554wubxjTfeqGPHjik7O1uStHz5chUUFKhnz57666+/rF9BQUFq1KiR1q1bZ7N9zZo1bXr2oqKi5O/vr6ZNm6pdu3bW9sL/l3RO4uPjbR4PHTpU0j/fywv5/PPPdd1111mHShVmGTRokH777Tft2bNH0j/fm5CQEC1ZssS63q5du5SSklJir93AgQNthke1a9dOhmFo4MCB1jZ3d3e1bdvW5rksW7ZMfn5+uvXWW23OW5s2bVSzZs1i561Zs2bWIXGSVLduXUVFRdn1uruQqKgo1a1bVw0aNNCAAQN01VVXadWqVapevbp1HS8vL7m5/fOnOj8/X8eOHVPNmjUVFRWln3766ZLH2L59u/bt26eHHnpIx44dsz7fU6dO6ZZbbtHGjRtVUFBQpudRs2ZNSSqxF1KS/Pz8JEmrV68ucfhoaRX9mbiYmJgYtWnTxvo4LCxMd999t1avXl2s19KZ1qxZozNnzmjEiBHW75skPfbYY/L19bUZcir9c+7Of317enrquuuuc8rrC0DZMZkDAKepW7euOnfurKVLlyonJ0f5+fm6//77S1w3LS1NISEhqlWrlk174ZCltLQ0m/awsLBi+6hdu3ax60ouxtF99OnTRy+88IJWrFihPn36aO/evdq6davmzZtX6mNfTEnXWBTNWjgc6++//5avr6/27dsnwzDUqFGjEvfp4eFh87h+/frFjuPn56fQ0NBibYXHKarosRo2bCg3N7eLzvaWlpZmU4gVOv/73KJFC2tBOnfuXOXk5Kh69epasmSJvL29rdcAna/o+SnMXdLzOf+57Nu3T1lZWapXr16JeY8ePXrR40j2v+4u5MMPP5Svr6/+/PNPzZo1S6mpqfLx8bFZp6CgQK+88ormzJmj1NRUmzf5derUueQx9u3bJ+mfa+0uJCsry2a4n71OnjwpScV+lgtFRERo1KhRmjFjhpYsWaIbb7xRd911lx5++GHr96007PlQoqSfi8aNGysnJ0d//vmngoKCSr0vexT+3ip67aKnp6ciIyOL/V4r6eeydu3aSklJKZd8AOxDoQTAqR566CE99thjysjIUNeuXeXv7++U/V5oZimjyIX65bGPZs2aqU2bNlq8eLH69OmjxYsXy9PTUz179rzkMb29vS84fXHhp+slzRB2qawFBQWyWCxatWpViesWfsp/qf2V5bxe6CJ6R/Xp00fTp0/XRx99pN69e2vp0qW68847S3wzbc/zOf+5FBQUqF69ejY9V+c7/5q2ix3HntfdhcTGxlpnvevevbtatmypuLg4bd261dobMWXKFI0fP14DBgzQ888/r4CAALm5uWnEiBGl6gkqXGf69Om6+uqrS1yn6GvFXrt27VK9evXk6+t7wXVeeukl9evXTx9//LG+/PJLDRs2TFOnTtXmzZtVv379Uh2naBFZVhd6/ZZnj1NR5fn6AlB2FEoAnOree+/V448/rs2bN+u999674Hrh4eFas2aNTpw4YfNJ9M8//2xdbi9nv3E/X58+fTRq1CgdPnxYS5cu1R133FGqT+HDw8P19ddf6/Tp08Xe6O3du9e6jr0aNmwowzAUERGhxo0b2729I/bt22fzqf7+/ftVUFBQ4sxhhcLDw63P83wlfZ9btGih1q1ba8mSJapfv77S09P16quvOu8J6J/ztmbNGnXo0MFpb7yd8bqrWbOmEhIS1L9/f73//vvWYZIffPCBbr75Zr355ps262dmZlqLrItlKBxq6uvrq86dO5c5Z1HJycn69ddfSzWpScuWLdWyZUuNGzdO3333nTp06KB58+Zp0qRJkpz781vYk3a+X375RdWrV7cWw7Vr1y7xnmtFe33syVb4et67d68iIyOt7WfOnFFqamq5fA8AlB+uUQLgVDVr1tTcuXM1YcIEde/e/YLrdevWTfn5+Xrttdds2l9++WVZLBZ17drV7mPXqFFDksrlhrO9e/eWxWLR8OHDdeDAgVLPdtetWzedPXtWr7/+uk17QUGB5s6dK09PT91yyy1257nvvvvk7u6uxMTEYp8+G4Zx0Zn8HDV79mybx4VFzMW+V926ddMPP/yg5ORka9upU6eUlJSkBg0aqFmzZjbrP/LII/ryyy81c+ZM1alTx6HXwcX07NlT+fn5ev7554stO3funEOvHWe97uLi4lS/fn298MIL1jZ3d/di399ly5bpjz/+KFWGNm3aqGHDhvq///s/6xC58/35558O501LS1O/fv3k6elpnZq/JNnZ2Tp37pxNW8uWLeXm5qa8vDyb5+Csn93k5GSba7gOHjyojz/+WLfddpu1F6dhw4bKysqyGeZ2+PBh62yM5yttts6dO8vT01OzZs2y+b69+eabysrK0h133FGGZwWgotGjBMDpLnY9RKHu3bvr5ptv1tixY/Xbb7+pVatW+vLLL/Xxxx9rxIgRNpMulFbhxdtjx45Vr1695OHhoe7du1vfRJZF3bp1dfvtt2vZsmXy9/cv9Rue7t2767bbbtPIkSP1ww8/qH379srJydEnn3yib7/9VpMmTSo23Ks0GjZsqEmTJmnMmDH67bffdM8996hWrVpKTU3VihUrNGjQII0ePdru/V5Mamqq7rrrLt1+++1KTk7W4sWL9dBDD1lvNFqSZ599Vu+88466du2qYcOGKSAgQG+99ZZSU1P14Ycf2lzwLv0zdPOZZ57RihUr9OSTTxa71qqsOnbsqMcff1xTp07V9u3bddttt8nDw0P79u3TsmXL9Morr1zwuroLufrqq+Xu7q4XXnhBWVlZ8vLyUqdOnS54HdSFeHh4aPjw4Xr66af1xRdf6Pbbb9edd96piRMnqn///mrfvr127typJUuW2PRWSP+8Hvz9/TVv3jzVqlVLNWrUULt27RQREaE33nhDXbt2VfPmzdW/f39deeWV+uOPP7Ru3Tr5+vpq5cqVl8z2008/afHixSooKFBmZqa2bNmiDz/8UBaLRYsWLVJ0dPQFt/366681ZMgQPfDAA2rcuLHOnTunRYsWyd3dXT169LCu16ZNG61Zs0YzZsxQSEiIIiIiSry+rTRatGihLl26aNiwYfLy8tKcOXMkyWaK/V69eulf//qX7r33Xg0bNkw5OTmaO3euGjduXGyijNJmq1u3rsaMGaPExETdfvvtuuuuu7R3717NmTNH1157bbndTgBAOTFhpj0AVcj504NfTNHpwQ3jn2miR44caYSEhBgeHh5Go0aNjOnT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AABQdYWFhSkpKcnh7dPS0jR58mSNHTtW4eHhDmcAUHbn386lefPmxZZX1tu5OFwoJSYm6tFHH9X69evVrl07SdL333+vL774QvPnz3daQAAAUPV4e3s7pTcnPDycXiHAZOffzuX8a5Skyn07F4fvo9SvXz99++238vX11fLly7V8+XL5+vpq06ZN6tevnxMjAgAAAHBVhbdzSU5O1rhx47R7927l5ORo9+7dGjdunJKTk/Xkk09WqokcpDLeR6ldu3ZasmSJs7JcVvLz85nBDQAAAFVCVbydS5kKpV9//VULFizQgQMHNHPmTNWrV0+rVq1SWFhYieMT8Y+qdjMuAAAAoKrdzsXhoXcbNmxQy5Yt9f333+vDDz/UyZMnJUk7duxQQkKC0wJWNYU344qMjNTs2bP1+eefa/bs2YqMjFRCQoI2btxodkQAAADAIYW3c7nlllvUunXrSlskSWUolJ599llNmjRJX331lTw9Pa3tnTp10ubNm50SrqopejOu5s2bq3r16tabccXExGju3LnKz883OyoAAABwWXN46N3OnTu1dOnSYu316tXTX3/9VaZQVVVVvRkXAACAq+LmxnCUw4WSv7+/Dh8+XOzGUtu2bdOVV15Z5mBVUVW9GRcAAICr4ubGcJTDhVKvXr30r3/9S8uWLZPFYlFBQYG+/fZbjR49Wn369HFmxirj/JtxNWnSpNiFbpX1ZlwAAACuipsbw1EOF0pTpkxRfHy8QkNDlZ+fr2bNmik/P18PPfSQxo0b58yMVUbhzbhmzZqlrKysYrPe+fn5VcqbcQEAALgqbm4MRzk8mYOnp6fmz5+vAwcO6NNPP9XixYv1888/a9GiRZV6dovy5O7urptuukl79+5VXl6eRo8erQ8//FCjR49WXl6e9u7dq44dO3L+AAAAAJM53KM0ceJEjR49WqGhoQoNDbW2nz59WtOnT9dzzz3nlIBVSX5+vtavX6+oqCj9/fff+r//+z/rssDAQEVFRWnDhg167LHHKJYAAAAAEznco5SYmGi9d9L5cnJylJiYWKZQVVXhrHexsbHFZr2zWCy68cYbdfjwYaWkpJiUEAAAAIBUhh4lwzBksViKte/YsYPJCC6gcDa7+fPnq3379ho/frwiIiKUmpqqJUuW6I033rBZr6pimk4AAAC4OrsLpdq1a8tischisahx48Y2xVJ+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4WZHclkJCQlGq1atzI5R6fzrX/8ybrjhBrNjVHrDhw83GjZsaBQUFJgdxWXdcccdxoABA2za7rvvPiMuLs6kRK4vJyfHcHd3Nz799FOb9muuucYYO3asSalcW9H3tAUFBUZQUJAxffp0a1tmZqbh5eVlvPPOOyYktB89SqiUsrKyJEkBAQEmJ6kc8vPz9e677+rUqVOKiYkxO06lEB8frzvuuEOdO3c2O0qlsG/fPoWEhCgyMlJxcXFKT083O5LL++STT9S2bVs98MADqlevnlq3bq358+ebHatSOXPmjBYvXqwBAwbIYrGYHcdltW/fXmvXrtUvv/wiSdqxY4c2bdqkrl27mpzMdZ07d075+fny9va2affx8aHHvJRSU1OVkZFh83fUz89P7dq1U3JysonJSq+a2QEAexUUFGjEiBHq0KGDWrRoYXYcl7Zz507FxMQoNzdXNWvW1IoVK9SsWTOzY7m8d999Vz/99BNj0UupXbt2WrhwoaKionT48GElJibqxhtv1K5du1SrVi2z47msAwcOaO7cuRo1apT+/e9/a8uWLRo2bJg8PT3Vt29fs+NVCh999JEyMzPVr18/s6O4tGeffVbZ2dlq0qSJ3N3dlZ+fr8mTJysuLs7saC6rVq1aiomJ0fPPP6+mTZsqMDBQ77zzjpKTk3XVVVeZHa9SyMjIkCQFBgbatAcGBlqXuToKJVQ68fHx2rVrF5/olEJUVJS2b9+urKwsffDBB+rbt682bNhAsXQRBw8e1PDhw/XVV18V+yQRJTv/U+no6Gi1a9dO4eHhev/99zVw4EATk7m2goICtW3bVlOmTJEktW7dWrt27dK8efMolErpzTffVNeuXRUSEmJ2FJf2/vvva8mSJVq6dKmaN2+u7du3a8SIEQoJCeG1dhGLFi3SgAEDdOWVV8rd3V3XXHONevfura1bt5odDRWEoXeoVIYMGaJPP/1U69atU/369c2O4/I8PT111VVXqU2bNpo6dapatWqlV155xexYLm3r1q06evSorrnmGlWrVk3VqlXThg0bNGvWLFWrVk35+flmR3R5/v7+aty4sfbv3292FJcWHBxc7EOLpk2bMmyxlNLS0rRmzRo9+uijZkdxeU8//bSeffZZ9erVSy1bttQjjzyikSNHaurUqWZHc2kNGzbUhg0bdPLkSR08eFA//PCDzp49q8jISLOjVQpBQUGSpCNHjti0HzlyxLrM1VEooVIwDENDhgzRihUr9PXXXysiIsLsSJVSQUGB8vLyzI7h0m655Rbt3LlT27dvt361bdtWcXFx2r59u9zd3c2O6PJOnjypX3/9VcHBwWZHcWkdOnQodpuDX375ReHh4SYlqlwWLFigevXq6Y477jA7isvLycmRm5vtWz53d3cVFBSYlKhyqVGjhoKDg/X3339r9erVuvvuu82OVClEREQoKChIa9eutbZlZ2fr+++/rzTXSzP0zgQnT560+aQ1NTVV27dvV0BAgMLCwkxM5rri4+O1dOlSffzxx6pVq5Z1bKufn598fHxMTueaxowZo65duyosLEwnTpzQ0qVLtX79eq1evdrsaC6tVq1axa59q1GjhurUqcM1cRcwevRode/eXeHh4Tp06JASEhLk7u6u3r17mx3NpY0cOVLt27fXlClT1LNnT/3www9KSkpSUlKS2dFcXkFBgRYsWKC+ffuqWjXeylxK9+7dNXnyZIWFhal58+batm2bZsyYoQEDBpgdzaWtXr1ahmEoKipK+/fv19NPP60mTZqof//+ZkdzGZd6TztixAhNmjRJjRo1UkREhMaPH6+QkBDdc8895oW2h9nT7l2O1q1bZ0gq9tW3b1+zo7msks6XJGPBggVmR3NZAwYMMMLDww1PT0+jbt26xi233GJ8+eWXZseqlJge/OIefPBBIzg42PD09DSuvPJK48EHHzT2799vdqxKYeXKlUaLFi0MLy8vo0mTJkZSUpLZkSqF1atXG5KMvXv3mh2lUsjOzjaGDx9uhIWFGd7e3kZkZKQxduxYIy8vz+xoLu29994zIiMjDU9PTyMoKMiIj483MjMzzY7lUi71nragoMAYP368ERgYaHh5eRm33HJLpfq5tRgGt2UGAAAAgPNxjRIAAAAAFEGhBAAAAABFUCgBAAAAQBEUSgAAAABQBIUSAAAAABRBoQQAAAAARVAoAQAAAEARFEoAAAAAUASFEgAAF2GxWPTRRx+ZHQMAUMEolAAALqlfv36yWCx64oknii2Lj4+XxWJRv379nHa8CRMm6Oqrr3ba/gAAlRuFEgDAZYWGhurdd9/V6dOnrW25ublaunSpwsLCTEwGAKjqKJQAAC7rmmuuUWhoqJYvX25tW758ucLCwtS6dWtrW15enoYNG6Z69erJ29tbN9xwg7Zs2WJdvn79elksFq1du1Zt27ZV9erV1b59e+3du1eStHDhQiUmJmrHjh2yWCyyWCxauHChdfu//vpL9957r6pXr65GjRrpk08+Kf8nDwAwFYUSAMClDRgwQAsWLLA+/s9//qP+/fvbrPPMM8/oww8/1FtvvaWffvpJV111lbp06aLjx4/brDd27Fi99NJL+vHHH1WtWjUNGDBAkvTggw/qqaeeUvPmzXX48GEdPnxYDz74oHW7xMRE9ezZUykpKerWrZvi4uKK7RsAULVQKAEAXNrDDz+sTZs2KS0tTWlpafr222/18MMPW5efOnVKc+fO1fTp09W1a1c1a9ZM8+fPl4+Pj958802bfU2ePFkdO3ZUs2bN9Oyzz+q7775Tbm6ufHx8VLNmTVWrVk1BQUEKCgqSj4+Pdbt+/fqpd+/euuqqqzRlyhSdPHlSP/zwQ4WdAwBAxatmdgAAAC6mbt26uuOOO7Rw4UIZhqE77rhDV1xxhXX5r7/+qrNnz6pDhw7WNg8PD1133XX673//a7Ov6Oho6/+Dg4MlSUePHr3k9U7nb1ejRg35+vrq6NGjZXpeAADXRqEEAHB5AwYM0JAhQyRJs2fPdng/Hh4e1v9bLBZJUkFBgV3bFW5bmu0AAJUXQ+8AAC7v9ttv15kzZ3T27Fl16dLFZlnDhg3l6empb7/91tp29uxZbdmyRc2aNSv1MTw9PZWfn++0zACAyo0eJQCAy3N3d7cOo3N3d7dZVqNGDT355JN6+umnFRAQoLCwML344ovKycnRwIEDS32MBg0aKDU1Vdu3b1f9+vVVq1YteXl5OfV5AAAqDwolAECl4Ovre8Fl06ZNU0FBgR555BGdOHFCbdu21erVq1W7du1S779Hjx5avny5br75ZmVmZmrBggVOvaEtAKBysRiGYZgdAgAAAABcCdcoAQAAAEARFEoAAAAAUASFEgAAAAAUQaEEAAAAAEVQKAEAAABAERRKAAAAAFAEhRIAAAAAFEGhBAAAAABFUCgBAAAAQBEUSgAAAABQBIUSAAAAABTx/wBkxVW5XA1EegAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}